<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>The blog of Ilya Pimenov</title>
 <link href="http://example.com/atom.xml" rel="self"/>
 <link href="http://example.com"/>
 <updated>2013-11-13T17:01:16+01:00</updated>
 <id>http://example.com</id>
 <author>
   <name>Ilya Pimenov</name>
   <email>ilya.pimenov@gmail.com</email>
 </author>

 
 <entry>
   <title>HyperLogLog with Cascalog</title>
   <link href="http://example.com/blog/2013/10/25/hyperloglog-with-cascalog.html"/>
   <updated>2013-10-25T00:00:00+02:00</updated>
   <id>http://example.com/blog/2013/10/25/hyperloglog-with-cascalog</id>
   <content type="html">
&lt;p&gt;We’ll look briefly in how you would utilize awesomeness of both Cascalog and HyperLogLog in order to execute Hadoop M/R tasks with amounts of data too big to have them in their original form.&lt;/p&gt;
&lt;hr /&gt;
&lt;h1 id=&quot;intro&quot;&gt;Intro&lt;/h1&gt;
&lt;dl&gt;
  &lt;dt&gt;&lt;strong&gt;HyperLogLog&lt;/strong&gt;&lt;/dt&gt;
  &lt;dd&gt;Cardinality estimator allowing you to count amount of distinct values.&lt;/dd&gt;
  &lt;dt&gt;&lt;strong&gt;Cascalog&lt;/strong&gt;&lt;/dt&gt;
  &lt;dd&gt;The main use cases for Cascalog are processing &quot;Big Data&quot; on top of Hadoop or doing analysis on your local computer. Cascalog is a replacement for tool like Pig, Hive, and Cascading which operates at a significantly higher level of abstraction than those tools.&lt;/dd&gt;
&lt;/dl&gt;
&lt;h1 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h1&gt;

&lt;p&gt;We’ll assume you are already familiar with the &lt;a href=&quot;http://clojure.org/&quot;&gt;Clojure&lt;/a&gt;, &lt;a href=&quot;https://github.com/nathanmarz/cascalog&quot;&gt;Cascalog&lt;/a&gt; framework and &lt;a href=&quot;http://blog.aggregateknowledge.com/2012/10/25/sketch-of-the-day-hyperloglog-cornerstone-of-a-big-data-infrastructure/&quot;&gt;HyperLogLog&lt;/a&gt; algorithm. Otherwise — jump straight to the bottom for some links, there are some nice reads there.&lt;/p&gt;

&lt;h1 id=&quot;counting_passengers&quot;&gt;Counting Passengers&lt;/h1&gt;

&lt;h2 id=&quot;task_as_stated&quot;&gt;Task as stated&lt;/h2&gt;

&lt;p&gt;We’ll deal with an example that is similar in its mechanics with a task we face ourselves at &lt;a href=&quot;http://screen6.io/&quot;&gt;Screen6&lt;/a&gt;, yet being from another market — passenger transportation.&lt;/p&gt;

&lt;p&gt;We are located in Amsterdam, and here, in Netherlands, you have this simple and easy system of public transport accessed by NFC card and which works as follows: prior to accessing the public transport (whether that be a tram, a bus or a train for that matter), you check-in by scanning your card, and once you get to your destination — you check-out with that same NFC card (which is called “OV-Chipkaart”).&lt;/p&gt;

&lt;p&gt;It’s convenient, I use all the time, whenever I’m neither biking or walking.&lt;/p&gt;

&lt;p&gt;Now imagine you have all these populous cities and people commuting between them on a daily/weekly/monthly/yearly basis, how would you monitor that traffic?&lt;/p&gt;

&lt;p&gt;Say, you want to see distribution of passengers in a certain city district (identified by zipcode) over time, and on top of that you’d love to see that same distribution over a month for two districts? Or three districts? Or two cities altogether?&lt;/p&gt;

&lt;p&gt;You can just store all events without any aggregations and directly do queries on that dataset, but it possesses two issues within itself: perfomance concern, as we are dealing with what supposed to be a very big amount of data, and hence — persistence issues.&lt;/p&gt;

&lt;p&gt;You cannot just store the list of unique passengers in all the districts per each smallest time-unit — it will be simply way too big to process and access for further analytics; and you cannot just store count of unique passengers, as that information is useless once you come to merging traffic in the different districts and cities (certainly those sets intersect heavily — it is very common to live in The Hague and work either in Amsterdam, Amsterdam Sloterdijk or Schiphol).&lt;/p&gt;

&lt;p&gt;That is where a &lt;em&gt;caridnality estimator&lt;/em&gt; comes in handy. It doesn’t provide you with an exact number, but rather tells you what the cardinality of a certain set is with a desired error margin, yet being comparatively dense to the initial set of original items and allowing you to merge different sets.&lt;/p&gt;

&lt;p&gt;A certain number of algorithms has popped out lately one of them being &lt;strong&gt;HyperLogLog&lt;/strong&gt;, and that is the one we are taking with us on our Cascalog-ride.&lt;/p&gt;

&lt;h2 id=&quot;formatting_and_sample_dataset&quot;&gt;Formatting and sample dataset&lt;/h2&gt;

&lt;p&gt;We are assuming that we have OV-Chipkaart access-logs: each and every swipe (Log file line) gives you a record of &lt;code&gt;city&lt;/code&gt;, &lt;code&gt;district&lt;/code&gt;, &lt;code&gt;tag&lt;/code&gt; and &lt;code&gt;timestamp&lt;/code&gt;:&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;field&lt;/th&gt;&lt;th&gt;type&lt;/th&gt;&lt;th&gt;example&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&quot;text-align: left;&quot;&gt;&lt;code&gt;city&lt;/code&gt;&lt;/td&gt;&lt;td style=&quot;text-align: left;&quot;&gt;Varchar&lt;/td&gt;&lt;td style=&quot;text-align: left;&quot;&gt;Amsterdam&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left;&quot;&gt;&lt;code&gt;district&lt;/code&gt;&lt;/td&gt;&lt;td style=&quot;text-align: left;&quot;&gt;Zipcode&lt;/td&gt;&lt;td style=&quot;text-align: left;&quot;&gt;1015&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left;&quot;&gt;&lt;code&gt;tag&lt;/code&gt;&lt;/td&gt;&lt;td style=&quot;text-align: left;&quot;&gt;UUID&lt;/td&gt;&lt;td style=&quot;text-align: left;&quot;&gt;96e4bfec-8cf5-4af1-9469-b7f0dc36dc29&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left;&quot;&gt;&lt;code&gt;timestamp&lt;/code&gt;&lt;/td&gt;&lt;td style=&quot;text-align: left;&quot;&gt;Ms. from Epoch&lt;/td&gt;&lt;td style=&quot;text-align: left;&quot;&gt;1363026503&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;&lt;p style='text-align: center;'&gt;Table 1. OV-Chipkaart access log record format&lt;/p&gt;
&lt;p&gt;Now, we didn’t get any logs from OV-Chipkaarts proprietor (though, I would’ve been delighted to get my hands on them), so we will have to generate some randomized data them ourselves. Here is the clojure code snippet code that will do just that:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='clojure'&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='k'&gt;def &lt;/span&gt;&lt;span class='nv'&gt;cities&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;Amsterdam&amp;quot;&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;Groningen&amp;quot;&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;Haarlem&amp;quot;&lt;/span&gt;
  &lt;span class='s'&gt;&amp;quot;Den-Haag&amp;quot;&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;Utrecht&amp;quot;&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;Delft&amp;quot;&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;Edam&amp;quot;&lt;/span&gt; &lt;span class='p'&gt;])&lt;/span&gt;

&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='k'&gt;def &lt;/span&gt;&lt;span class='nv'&gt;tags&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;repeatedly&lt;/span&gt; &lt;span class='mi'&gt;10000&lt;/span&gt; &lt;span class='o'&gt;#&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nb'&gt;str &lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;java.util.UUID/randomUUID&lt;/span&gt;&lt;span class='p'&gt;))))&lt;/span&gt;

&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kd'&gt;defn &lt;/span&gt;&lt;span class='nv'&gt;line&lt;/span&gt; &lt;span class='p'&gt;[]&lt;/span&gt;
  &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='k'&gt;let &lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;city&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;rand-nth&lt;/span&gt; &lt;span class='nv'&gt;cities&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
        &lt;span class='nv'&gt;district&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nb'&gt;+ &lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nb'&gt;+ &lt;/span&gt;&lt;span class='mi'&gt;10&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nb'&gt;rand-int &lt;/span&gt;&lt;span class='mi'&gt;89&lt;/span&gt;&lt;span class='p'&gt;))&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nb'&gt;* &lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nb'&gt;+ &lt;/span&gt;&lt;span class='mi'&gt;10&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nb'&gt;rand-int &lt;/span&gt;&lt;span class='mi'&gt;89&lt;/span&gt;&lt;span class='p'&gt;))&lt;/span&gt; &lt;span class='mi'&gt;100&lt;/span&gt;&lt;span class='p'&gt;))&lt;/span&gt;
        &lt;span class='nv'&gt;tag&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;rand-nth&lt;/span&gt; &lt;span class='nv'&gt;tags&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
        &lt;span class='nv'&gt;timestamp&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nb'&gt;+ &lt;/span&gt;&lt;span class='mi'&gt;1351680873&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nb'&gt;rand-int &lt;/span&gt;&lt;span class='mi'&gt;31536001&lt;/span&gt;&lt;span class='p'&gt;))]&lt;/span&gt;
        &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nb'&gt;str &lt;/span&gt;&lt;span class='nv'&gt;city&lt;/span&gt; &lt;span class='s'&gt;&amp;quot; &amp;quot;&lt;/span&gt; &lt;span class='nv'&gt;district&lt;/span&gt; &lt;span class='s'&gt;&amp;quot; &amp;quot;&lt;/span&gt; &lt;span class='nv'&gt;tag&lt;/span&gt; &lt;span class='s'&gt;&amp;quot; &amp;quot;&lt;/span&gt; &lt;span class='nv'&gt;timestamp&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;)))&lt;/span&gt;

&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;use&lt;/span&gt; &lt;span class='ss'&gt;&amp;#39;clojure.java.io&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nb'&gt;with-open &lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;wrtr&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;writer&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;./ov-chipkaart-accesslogs.txt&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;)]&lt;/span&gt;
  &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nb'&gt;dotimes &lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;_&lt;/span&gt; &lt;span class='mi'&gt;5000000&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;.write&lt;/span&gt; &lt;span class='nv'&gt;wrtr&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;line&lt;/span&gt;&lt;span class='p'&gt;))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This would provide us with a file of approximate 157Mb size holding 5.000.000 OV-chipkaart accesslog records; gziped — 78Mb.&lt;/p&gt;

&lt;h2 id=&quot;defining_incoming_datasets&quot;&gt;Defining incoming datasets&lt;/h2&gt;

&lt;p&gt;Normally you would define one &lt;code&gt;source&lt;/code&gt; function per dataset type as a simple cascalog query, that does reading, mapping, type checks and conversions. Our example won’t be any different — we’ll read the file line-by-line from Hadoop File System (which will nicely pickup both gzippped and not gzipped files for us):&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='clojure'&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kd'&gt;ns &lt;/span&gt;&lt;span class='nv'&gt;...&lt;/span&gt;
  &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='ss'&gt;:require&lt;/span&gt; &lt;span class='nv'&gt;...&lt;/span&gt;
            &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;cascalog.api&lt;/span&gt; &lt;span class='ss'&gt;:as&lt;/span&gt; &lt;span class='nv'&gt;c&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;
            &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;cascalog.ops&lt;/span&gt; &lt;span class='ss'&gt;:as&lt;/span&gt; &lt;span class='nv'&gt;ops&lt;/span&gt;&lt;span class='p'&gt;]))&lt;/span&gt;

&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='k'&gt;def &lt;/span&gt;&lt;span class='nv'&gt;ov-fields&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;?city&amp;quot;&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;?district&amp;quot;&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;?uuid&amp;quot;&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;?timestamp&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;])&lt;/span&gt;

&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kd'&gt;defn &lt;/span&gt;&lt;span class='nv'&gt;ov-source&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;directory&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;
  &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='k'&gt;let &lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;source&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;get-tap&lt;/span&gt; &lt;span class='nv'&gt;directory&lt;/span&gt;&lt;span class='p'&gt;)]&lt;/span&gt;
    &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;c/&amp;lt;-&lt;/span&gt; &lt;span class='nv'&gt;ov-fields&lt;/span&gt;
          &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;source&lt;/span&gt; &lt;span class='ss'&gt;:&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class='nv'&gt;ov-fields&lt;/span&gt;&lt;span class='p'&gt;))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we have an &lt;code&gt;ov-source&lt;/code&gt; cascalog query, which can be utilized as an incoming data stream; without caring too much if the data is correct or not.&lt;/p&gt;
&lt;div class='note'&gt;Add filters to the ov-source query, in order to drop undesired corrupted data.&lt;/div&gt;
&lt;h2 id=&quot;which_one&quot;&gt;Which one?&lt;/h2&gt;

&lt;p&gt;Now, you can either go and implement your own implementation of HyperLogLog that will suit your needs, or you can pick one of the following already existing opensourced implementatoins:&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Company&lt;/th&gt;&lt;th&gt;Library&lt;/th&gt;&lt;th&gt;Link&lt;/th&gt;&lt;th&gt;Language&lt;/th&gt;&lt;th&gt;License&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&quot;text-align: left;&quot;&gt;Facebook&lt;/td&gt;&lt;td style=&quot;text-align: left;&quot;&gt;&lt;a href=&quot;https://github.com/facebook/jcommon/&quot;&gt;JCommon&lt;/a&gt;&lt;/td&gt;&lt;td style=&quot;text-align: left;&quot;&gt;&lt;a href=&quot;https://github.com/facebook/jcommon/blob/master/stats/src/main/java/com/facebook/stats/cardinality/HyperLogLog.java&quot;&gt;HyperLogLog.java&lt;/a&gt;&lt;/td&gt;&lt;td style=&quot;text-align: left;&quot;&gt;Java&lt;/td&gt;&lt;td style=&quot;text-align: left;&quot;&gt;Apache License 2.0&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left;&quot;&gt;Twitter&lt;/td&gt;&lt;td style=&quot;text-align: left;&quot;&gt;&lt;a href=&quot;https://github.com/twitter/algebird/&quot;&gt;Algebird&lt;/a&gt;&lt;/td&gt;&lt;td style=&quot;text-align: left;&quot;&gt;&lt;a href=&quot;https://github.com/twitter/algebird/blob/develop/algebird-core/src/main/scala/com/twitter/algebird/HyperLogLog.scala&quot;&gt;HyperLogLog.scala&lt;/a&gt;&lt;/td&gt;&lt;td style=&quot;text-align: left;&quot;&gt;Scala&lt;/td&gt;&lt;td style=&quot;text-align: left;&quot;&gt;Apache License 2.0&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left;&quot;&gt;AddThis&lt;/td&gt;&lt;td style=&quot;text-align: left;&quot;&gt;&lt;a href=&quot;https://github.com/addthis/stream-lib&quot;&gt;Stream-Lib&lt;/a&gt;&lt;/td&gt;&lt;td style=&quot;text-align: left;&quot;&gt;&lt;a href=&quot;https://github.com/addthis/stream-lib/blob/master/src/main/java/com/clearspring/analytics/stream/cardinality/HyperLogLog.java&quot;&gt;HyperLogLog.java&lt;/a&gt;&lt;/td&gt;&lt;td style=&quot;text-align: left;&quot;&gt;Java&lt;/td&gt;&lt;td style=&quot;text-align: left;&quot;&gt;Apache License 2.0&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: left;&quot;&gt;indie!&lt;/td&gt;&lt;td style=&quot;text-align: left;&quot;&gt;&lt;a href=&quot;https://gist.github.com/yukim&quot;&gt;yukim’s gists&lt;/a&gt;&lt;/td&gt;&lt;td style=&quot;text-align: left;&quot;&gt;&lt;a href=&quot;https://gist.github.com/yukim/2597943#file-hyperloglog-java&quot;&gt;HyperLogLog.java&lt;/a&gt;&lt;/td&gt;&lt;td style=&quot;text-align: left;&quot;&gt;Java&lt;/td&gt;&lt;td style=&quot;text-align: left;&quot;&gt;Apache License 2.0&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;&lt;p style='text-align: center;'&gt;Table 2. Available HyperLogLog implementations&lt;/p&gt;
&lt;p&gt;We chose &lt;a href=&quot;http://www.addthis.com/&quot;&gt;AddThis&lt;/a&gt;’s &lt;a href=&quot;https://github.com/addthis/stream-lib&quot;&gt;Stream-Lib&lt;/a&gt;’s implementation, as from my subjective point of view it seemed to be most clear, nicely documented and reasonable implementatable; besides, they added a bunch of other sweet things for cardinality estimation in that same library, together with the list of papers their implementations were based upon.&lt;/p&gt;

&lt;h2 id=&quot;creating_offers&quot;&gt;Creating offers&lt;/h2&gt;

&lt;p&gt;There are two approaches to merging HyperLogLog values:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Either you create an object wrapping up each value in a HyperLogLog value and merge those after&lt;/li&gt;

&lt;li&gt;Or you create HyperLogLog value once for a set of values and then &lt;em&gt;offer&lt;/em&gt; them to this particular object&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Depending on the case, you might even want to construct an &lt;em&gt;offer&lt;/em&gt; string for your HyperLogLog value as composite key of multiple values in the row. But no matter what you do, keep in mind — it is way better and much more efficient to keep the offers and merge those into the existing HyperLogLog value, rather than merging multiple HyperLogLog values.&lt;/p&gt;

&lt;p&gt;Lets drop a little code sketch real quick to compare them:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='clojure'&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kd'&gt;ns &lt;/span&gt;&lt;span class='nv'&gt;...&lt;/span&gt;
  &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='ss'&gt;:import&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;com.clearspring.analytics.stream.cardinality&lt;/span&gt; &lt;span class='nv'&gt;HyperLogLog&lt;/span&gt; &lt;span class='nv'&gt;HyperLogLog$Builder&lt;/span&gt;&lt;span class='p'&gt;]))&lt;/span&gt;

&lt;span class='c1'&gt;;; single hyperloglog value, multiple inserts&lt;/span&gt;
&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;time&lt;/span&gt;
  &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nb'&gt;dotimes &lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;n&lt;/span&gt; &lt;span class='mi'&gt;1000000&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;
    &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;.offer&lt;/span&gt; &lt;span class='nv'&gt;h&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nb'&gt;str &lt;/span&gt;&lt;span class='s'&gt;&amp;quot;check&amp;quot;&lt;/span&gt; &lt;span class='nv'&gt;n&lt;/span&gt;&lt;span class='p'&gt;))))&lt;/span&gt;

&lt;span class='c1'&gt;;; and this is like if we are merging hyperloglogs all the time;&lt;/span&gt;
&lt;span class='c1'&gt;;; note that we have to create hyperloglog value every time&lt;/span&gt;
&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;time&lt;/span&gt;
  &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nb'&gt;dotimes &lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;n&lt;/span&gt; &lt;span class='mi'&gt;1000000&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;
    &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nb'&gt;merge &lt;/span&gt;&lt;span class='nv'&gt;h&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='k'&gt;let &lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;nh&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;create&lt;/span&gt;&lt;span class='p'&gt;)]&lt;/span&gt;
      &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;.offer&lt;/span&gt; &lt;span class='nv'&gt;nh&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nb'&gt;str &lt;/span&gt;&lt;span class='s'&gt;&amp;quot;check&amp;quot;&lt;/span&gt; &lt;span class='nv'&gt;n&lt;/span&gt;&lt;span class='p'&gt;))&lt;/span&gt;
      &lt;span class='nv'&gt;nh&lt;/span&gt;&lt;span class='p'&gt;))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here is a sample time comparison &lt;code&gt;offer&lt;/code&gt; vs &lt;code&gt;merge&lt;/code&gt; result:&lt;/p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;operation&lt;/th&gt;&lt;th&gt;execution 1&lt;/th&gt;&lt;th&gt;execution 2&lt;/th&gt;&lt;th&gt;execution 3&lt;/th&gt;&lt;th&gt;execution 4&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&quot;text-align: center;&quot;&gt;&lt;code&gt;offer&lt;/code&gt;&lt;/td&gt;&lt;td style=&quot;text-align: center;&quot;&gt;1513.87 msecs&lt;/td&gt;&lt;td style=&quot;text-align: center;&quot;&gt;1479.377 msecs&lt;/td&gt;&lt;td style=&quot;text-align: center;&quot;&gt;1493.119 msecs&lt;/td&gt;&lt;td style=&quot;text-align: center;&quot;&gt;1485.23 msecs&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center;&quot;&gt;&lt;code&gt;merge&lt;/code&gt;&lt;/td&gt;&lt;td style=&quot;text-align: center;&quot;&gt;7433.302 msecs&lt;/td&gt;&lt;td style=&quot;text-align: center;&quot;&gt;7306.165 msecs&lt;/td&gt;&lt;td style=&quot;text-align: center;&quot;&gt;7369.459 msecs&lt;/td&gt;&lt;td style=&quot;text-align: center;&quot;&gt;7246.366 msecs&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;&lt;p style='text-align: center;'&gt;Table 3. HyperLogLog offer vs merge execution times&lt;/p&gt;&lt;div class='note'&gt;Store list of raw distinct values and offer them to a single HyperLogLog object instead of merging separate HyperLogLog values, when possible.&lt;/div&gt;
&lt;h2 id=&quot;reducing&quot;&gt;Reducing&lt;/h2&gt;

&lt;p&gt;Now, once we have read files, reducing in Cascalog is rather easy and straightforward, yet we will throw in some code in order to deal with HyperLogLog values in an easy way:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='clojure'&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kd'&gt;defmulti &lt;/span&gt;&lt;span class='nv'&gt;merge&lt;/span&gt;
  &lt;span class='s'&gt;&amp;quot;Merge two HyperLogLog objects.&lt;/span&gt;
&lt;span class='s'&gt;   If one of values is an offer, then it will&lt;/span&gt;
&lt;span class='s'&gt;   be offered to the HyperLogLog value.  If both&lt;/span&gt;
&lt;span class='s'&gt;   values are offers, new HyperLogLog will be&lt;/span&gt;
&lt;span class='s'&gt;   created and both values will be offered to&lt;/span&gt;
&lt;span class='s'&gt;   this newly created value.&amp;quot;&lt;/span&gt;
  &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='k'&gt;fn &lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nb'&gt;left &lt;/span&gt;&lt;span class='nv'&gt;right&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='p'&gt;[(&lt;/span&gt;&lt;span class='nb'&gt;class &lt;/span&gt;&lt;span class='nv'&gt;left&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nb'&gt;class &lt;/span&gt;&lt;span class='nv'&gt;right&lt;/span&gt;&lt;span class='p'&gt;)]))&lt;/span&gt;

&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kd'&gt;defmethod &lt;/span&gt;&lt;span class='nb'&gt;merge &lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;HyperLogLog&lt;/span&gt; &lt;span class='nv'&gt;HyperLogLog&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nb'&gt;left &lt;/span&gt;&lt;span class='nv'&gt;right&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;
  &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;.addAll&lt;/span&gt; &lt;span class='nb'&gt;left &lt;/span&gt;&lt;span class='nv'&gt;right&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
  &lt;span class='nv'&gt;left&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;

&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kd'&gt;defmethod &lt;/span&gt;&lt;span class='nb'&gt;merge &lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;HyperLogLog&lt;/span&gt; &lt;span class='nv'&gt;String&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nb'&gt;left &lt;/span&gt;&lt;span class='nv'&gt;right&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;
  &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;.offer&lt;/span&gt; &lt;span class='nb'&gt;left &lt;/span&gt;&lt;span class='nv'&gt;right&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
  &lt;span class='nv'&gt;left&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;

&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kd'&gt;defmethod &lt;/span&gt;&lt;span class='nb'&gt;merge &lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;String&lt;/span&gt; &lt;span class='nv'&gt;HyperLogLog&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nb'&gt;left &lt;/span&gt;&lt;span class='nv'&gt;right&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;
  &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;.offer&lt;/span&gt; &lt;span class='nb'&gt;right &lt;/span&gt;&lt;span class='nv'&gt;left&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
  &lt;span class='nv'&gt;right&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;

&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kd'&gt;defmethod &lt;/span&gt;&lt;span class='nb'&gt;merge &lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;nil&lt;/span&gt; &lt;span class='nv'&gt;HyperLogLog&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nb'&gt;left &lt;/span&gt;&lt;span class='nv'&gt;right&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;
  &lt;span class='nv'&gt;right&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;

&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kd'&gt;defmethod &lt;/span&gt;&lt;span class='nb'&gt;merge &lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;HyperLogLog&lt;/span&gt; &lt;span class='nv'&gt;nil&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nb'&gt;left &lt;/span&gt;&lt;span class='nv'&gt;right&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;
  &lt;span class='nv'&gt;left&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;

&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kd'&gt;defmethod &lt;/span&gt;&lt;span class='nb'&gt;merge &lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;String&lt;/span&gt; &lt;span class='nv'&gt;String&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nb'&gt;left &lt;/span&gt;&lt;span class='nv'&gt;right&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;
  &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='k'&gt;let &lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;acc&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;create&lt;/span&gt;&lt;span class='p'&gt;)]&lt;/span&gt;
    &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;.offer&lt;/span&gt; &lt;span class='nv'&gt;acc&lt;/span&gt; &lt;span class='nv'&gt;left&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
    &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;.offer&lt;/span&gt; &lt;span class='nv'&gt;acc&lt;/span&gt; &lt;span class='nv'&gt;right&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
    &lt;span class='nv'&gt;acc&lt;/span&gt;&lt;span class='p'&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you can see, this will merge whatever you feed it, and provide you with the HyperLogLog value. This would allow us to throw in some glue to merge HyperLogLog values in the Cascalog queries:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='clojure'&gt;&lt;span class='lineno'&gt; 1&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kd'&gt;defn &lt;/span&gt;&lt;span class='nv'&gt;merge-n&lt;/span&gt;
&lt;span class='lineno'&gt; 2&lt;/span&gt;   &lt;span class='p'&gt;([&lt;/span&gt;&lt;span class='nv'&gt;h1&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='nv'&gt;h1&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;span class='lineno'&gt; 3&lt;/span&gt;   &lt;span class='p'&gt;([&lt;/span&gt;&lt;span class='nv'&gt;h1&lt;/span&gt; &lt;span class='nv'&gt;h2&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nb'&gt;merge &lt;/span&gt;&lt;span class='nv'&gt;h1&lt;/span&gt; &lt;span class='nv'&gt;h2&lt;/span&gt;&lt;span class='p'&gt;))&lt;/span&gt;
&lt;span class='lineno'&gt; 4&lt;/span&gt;   &lt;span class='p'&gt;([&lt;/span&gt;&lt;span class='nv'&gt;h1&lt;/span&gt; &lt;span class='nv'&gt;h2&lt;/span&gt; &lt;span class='o'&gt;&amp;amp;&lt;/span&gt; &lt;span class='nv'&gt;more&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;
&lt;span class='lineno'&gt; 5&lt;/span&gt;    &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nb'&gt;reduce merge &lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nb'&gt;merge &lt;/span&gt;&lt;span class='nv'&gt;h1&lt;/span&gt; &lt;span class='nv'&gt;h2&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='nv'&gt;more&lt;/span&gt;&lt;span class='p'&gt;)))&lt;/span&gt;
&lt;span class='lineno'&gt; 6&lt;/span&gt; 
&lt;span class='lineno'&gt; 7&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kd'&gt;defn &lt;/span&gt;&lt;span class='nv'&gt;identity&lt;/span&gt;
&lt;span class='lineno'&gt; 8&lt;/span&gt;   &lt;span class='p'&gt;{&lt;/span&gt;&lt;span class='ss'&gt;:static&lt;/span&gt; &lt;span class='nv'&gt;true&lt;/span&gt;&lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='lineno'&gt; 9&lt;/span&gt;   &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;value&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;
&lt;span class='lineno'&gt;10&lt;/span&gt;   &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='k'&gt;let &lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;res&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;create&lt;/span&gt;&lt;span class='p'&gt;)]&lt;/span&gt;
&lt;span class='lineno'&gt;11&lt;/span&gt;     &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;.offer&lt;/span&gt; &lt;span class='nv'&gt;res&lt;/span&gt; &lt;span class='nv'&gt;value&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;span class='lineno'&gt;12&lt;/span&gt;     &lt;span class='nv'&gt;res&lt;/span&gt;&lt;span class='p'&gt;))&lt;/span&gt;
&lt;span class='lineno'&gt;13&lt;/span&gt; 
&lt;span class='lineno'&gt;14&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;c/defparallelagg&lt;/span&gt; &lt;span class='nv'&gt;parallel-sum&lt;/span&gt;
&lt;span class='lineno'&gt;15&lt;/span&gt;                   &lt;span class='ss'&gt;:init-var&lt;/span&gt; &lt;span class='o'&gt;#&lt;/span&gt;&lt;span class='ss'&gt;&amp;#39;identity&lt;/span&gt;
&lt;span class='lineno'&gt;16&lt;/span&gt;                   &lt;span class='ss'&gt;:combine-var&lt;/span&gt; &lt;span class='o'&gt;#&lt;/span&gt;&lt;span class='ss'&gt;&amp;#39;merge-n&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;span class='lineno'&gt;17&lt;/span&gt; 
&lt;span class='lineno'&gt;18&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='k'&gt;def &lt;/span&gt;&lt;span class='nv'&gt;sum&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;ops/each&lt;/span&gt; &lt;span class='nv'&gt;parallel-sum&lt;/span&gt;&lt;span class='p'&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This operations will &lt;em&gt;“sum up”&lt;/em&gt; all the offers, the same way you would’ve use &lt;code&gt;cascalog.ops/sum&lt;/code&gt; operation on numerical values, you can use this operation on HyperLogLog values. In a cascalog query it will end up simply as:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='clojure'&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;c/&amp;lt;-&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;?city&lt;/span&gt; &lt;span class='nv'&gt;?district&lt;/span&gt; &lt;span class='nv'&gt;?hll&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;
  &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;ov-source&lt;/span&gt; &lt;span class='ss'&gt;:&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class='nv'&gt;ov-fields&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
  &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;hll/sum&lt;/span&gt; &lt;span class='nv'&gt;?uuid&lt;/span&gt; &lt;span class='ss'&gt;:&amp;gt;&lt;/span&gt; &lt;span class='nv'&gt;?hll&lt;/span&gt;&lt;span class='p'&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;persistent&quot;&gt;Persistent&lt;/h2&gt;

&lt;p&gt;HyperLogLog is an object, basically a set or register set’s under the hood, and might you want to persist it — you will require to serialize it somehow.&lt;/p&gt;

&lt;p&gt;Now in order to use some sort of Tap, you’ll need to store your bytes sequence, which in case of Cascalog is in a form of string of some kind; since at the moment we use both JDBC Taps and plain CSV files, without diving too deep, we simply encode it with &lt;code&gt;base64&lt;/code&gt; and throw it is as an UTF-8 string; so the whole cascalog query will look like this:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='clojure'&gt;&lt;span class='lineno'&gt; 1&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;c/defmapop&lt;/span&gt; &lt;span class='nv'&gt;stringify&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;hll-object&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;
&lt;span class='lineno'&gt; 2&lt;/span&gt;   &lt;span class='p'&gt;[(&lt;/span&gt;&lt;span class='nf'&gt;Base64/encodeBase64String&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;.getBytes&lt;/span&gt; &lt;span class='nv'&gt;hll-object&lt;/span&gt;&lt;span class='p'&gt;))])&lt;/span&gt;
&lt;span class='lineno'&gt; 3&lt;/span&gt; 
&lt;span class='lineno'&gt; 4&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kd'&gt;defn &lt;/span&gt;&lt;span class='nv'&gt;get-day-n-year&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;epoch-time&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;
&lt;span class='lineno'&gt; 5&lt;/span&gt;   &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='k'&gt;let &lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt; &lt;span class='nv'&gt;epoch-time-long&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;Long/parseLong&lt;/span&gt; &lt;span class='nv'&gt;epoch-time&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;span class='lineno'&gt; 6&lt;/span&gt;          &lt;span class='nv'&gt;in-millis&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nb'&gt;* &lt;/span&gt;&lt;span class='nv'&gt;epoch-time-long&lt;/span&gt; &lt;span class='mi'&gt;1000&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;span class='lineno'&gt; 7&lt;/span&gt;          &lt;span class='nv'&gt;date&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;time2/from-long&lt;/span&gt; &lt;span class='nv'&gt;in-millis&lt;/span&gt;&lt;span class='p'&gt;)]&lt;/span&gt;
&lt;span class='lineno'&gt; 8&lt;/span&gt;     &lt;span class='p'&gt;[(&lt;/span&gt;&lt;span class='nf'&gt;.getDayOfYear&lt;/span&gt; &lt;span class='nv'&gt;date&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;.getYear&lt;/span&gt; &lt;span class='nv'&gt;date&lt;/span&gt;&lt;span class='p'&gt;)]))&lt;/span&gt;
&lt;span class='lineno'&gt; 9&lt;/span&gt; 
&lt;span class='lineno'&gt;10&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kd'&gt;defn &lt;/span&gt;&lt;span class='nv'&gt;count-gvb-passengers&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;path&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;
&lt;span class='lineno'&gt;11&lt;/span&gt;   &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='k'&gt;let &lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;ov-source&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;ov-source&lt;/span&gt; &lt;span class='nv'&gt;path&lt;/span&gt;&lt;span class='p'&gt;)]&lt;/span&gt;
&lt;span class='lineno'&gt;12&lt;/span&gt;     &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;c/&amp;lt;-&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nv'&gt;?city&lt;/span&gt; &lt;span class='nv'&gt;?district&lt;/span&gt; &lt;span class='nv'&gt;?day&lt;/span&gt; &lt;span class='nv'&gt;?year&lt;/span&gt; &lt;span class='nv'&gt;?cardinality&lt;/span&gt; &lt;span class='nv'&gt;?base64-hll&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;
&lt;span class='lineno'&gt;13&lt;/span&gt; 
&lt;span class='lineno'&gt;14&lt;/span&gt;       &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='ss'&gt;:trap&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;c/hfs-textline&lt;/span&gt; &lt;span class='s'&gt;&amp;quot;/tmp/hll-demo-errors&amp;quot;&lt;/span&gt; &lt;span class='ss'&gt;:sinkmode&lt;/span&gt; &lt;span class='ss'&gt;:replace&lt;/span&gt; &lt;span class='p'&gt;))&lt;/span&gt;
&lt;span class='lineno'&gt;15&lt;/span&gt; 
&lt;span class='lineno'&gt;16&lt;/span&gt;       &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;ov-source&lt;/span&gt; &lt;span class='ss'&gt;:&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class='nv'&gt;ov-fields&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;span class='lineno'&gt;17&lt;/span&gt; 
&lt;span class='lineno'&gt;18&lt;/span&gt;       &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;hll/sum&lt;/span&gt; &lt;span class='nv'&gt;?uuid&lt;/span&gt; &lt;span class='ss'&gt;:&amp;gt;&lt;/span&gt; &lt;span class='nv'&gt;?hll&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;span class='lineno'&gt;19&lt;/span&gt;       &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;cardinality&lt;/span&gt; &lt;span class='nv'&gt;?hll&lt;/span&gt; &lt;span class='ss'&gt;:&amp;gt;&lt;/span&gt; &lt;span class='nv'&gt;?cardinality&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;span class='lineno'&gt;20&lt;/span&gt;       &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;get-day-n-year&lt;/span&gt; &lt;span class='nv'&gt;?timestamp&lt;/span&gt; &lt;span class='ss'&gt;:&amp;gt;&lt;/span&gt; &lt;span class='nv'&gt;?day&lt;/span&gt; &lt;span class='nv'&gt;?year&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;span class='lineno'&gt;21&lt;/span&gt;       &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nf'&gt;hll/stringify&lt;/span&gt; &lt;span class='nv'&gt;?hll&lt;/span&gt; &lt;span class='ss'&gt;:&amp;gt;&lt;/span&gt; &lt;span class='nv'&gt;?base64-hll&lt;/span&gt;&lt;span class='p'&gt;))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that we throw in day and year parsing.&lt;/p&gt;

&lt;p&gt;Now we have nice rows grouped by &lt;code&gt;(district, day)&lt;/code&gt; key with the amount of passengers seen that day, which can be cheaply merged in the runtime (whenever you request statistics through any online tooling).&lt;/p&gt;

&lt;p&gt;Sweeet.&lt;/p&gt;

&lt;h1 id=&quot;gist&quot;&gt;Gist&lt;/h1&gt;

&lt;p&gt;And, of course, here is the full gist, of the code I used to demo HyperLogLog with Cascalog in this article:&lt;/p&gt;
&lt;script src='https://gist.github.com/7319327.js'&gt;&lt;![CDATA[ ]]&gt;&lt;/script&gt;
&lt;h1 id=&quot;links&quot;&gt;Links&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://clojure.org/&quot;&gt;Clojure: Dynamic programming language that target Java Virtual Machine&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;http://blog.aggregateknowledge.com/2012/10/25/sketch-of-the-day-hyperloglog-cornerstone-of-a-big-data-infrastructure/&quot;&gt;HyperLogLog — Cornerstone of a Big Data Infrastructure&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;https://github.com/nathanmarz/cascalog&quot;&gt;Cascalog: Data processing on Hadoop without the hassle&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;[Originally published in &lt;a href=&quot;http://screen6.github.io/blog/2013/10/25/hyperloglog-with-cascalog.html&quot;&gt;Screen6 Technical Blog&lt;/a&gt; on 20/25/2013]&lt;/em&gt;&lt;/p&gt;
</content>
 </entry>
 
 
</feed>
